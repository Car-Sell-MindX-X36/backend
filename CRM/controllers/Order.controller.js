import Order from '../models/Order.js';
import Vehicle from '../models/Vehicle.js';
import Customer from '../models/Customers.js';
import Staff from '../models/Staffs.js';

export const createOrder = async (req, res) => {
  try {
    const { customerId, vehicles, orderType, paymentMethod, staffId, note } = req.body;

    // ‚úÖ Validate c∆° b·∫£n
    if (!customerId || !vehicles || !Array.isArray(vehicles) || vehicles.length === 0) {
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin kh√°ch h√†ng v√† √≠t nh·∫•t 1 xe" });
    }

    if (!['rental', 'buy'].includes(orderType)) {
      return res.status(400).json({ message: "üö´ Lo·∫°i ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá" });
    }

    if (!['cash', 'qr', 'installment'].includes(paymentMethod)) {
      return res.status(400).json({ message: "üö´ Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá" });
    }

    // ‚úÖ Check duplicate vehicleId
    const vehicleIds = vehicles.map(v => v.vehicleId);
    const duplicateIds = vehicleIds.filter((id, index) => vehicleIds.indexOf(id) !== index);
    if (duplicateIds.length > 0) {
      return res.status(400).json({ message: `üö´ Xe b·ªã l·∫∑p trong ƒë∆°n h√†ng: ${[...new Set(duplicateIds)].join(', ')}` });
    }

    // ‚úÖ Ki·ªÉm tra t·ªìn t·∫°i kh√°ch h√†ng v√† nh√¢n vi√™n
    const [customer, staff] = await Promise.all([
      Customer.findById(customerId),
      Staff.findById(staffId),
    ]);

    if (!customer) {
      return res.status(404).json({ message: "‚ùå Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng" });
    }

    if (!staff) {
      return res.status(404).json({ message: "‚ùå Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n" });
    }

    // ‚úÖ Validate role c·ªßa nh√¢n vi√™n
    if (!['agent', 'manager'].includes(staff.role)) {
      return res.status(403).json({ message: "üö´ Nh√¢n vi√™n kh√¥ng c√≥ quy·ªÅn t·∫°o ƒë∆°n h√†ng" });
    }

    // ‚úÖ Duy·ªát danh s√°ch xe
    let totalAmount = 0;
    const vehicleList = [];

    for (const v of vehicles) {
      const vehicle = await Vehicle.findById(v.vehicleId);
      if (!vehicle) {
        return res.status(404).json({ message: `‚ùå Xe kh√¥ng t·ªìn t·∫°i: ${v.vehicleId}` });
      }

      // üö´ N·∫øu nghi·ªáp v·ª• y√™u c·∫ßu ki·ªÉm tra quy·ªÅn qu·∫£n l√Ω xe:
      // if (staff.role === 'agent' && vehicle.createdBy.toString() !== staffId) {
      //   return res.status(403).json({ message: `üö´ Xe kh√¥ng thu·ªôc quy·ªÅn qu·∫£n l√Ω c·ªßa agent: ${v.vehicleId}` });
      // }

      if (vehicle.status !== 'available') {
        return res.status(400).json({ message: `üö´ Xe kh√¥ng kh·∫£ d·ª•ng: ${vehicle._id}` });
      }

      if (orderType === 'rental') {
        const { startDate, endDate } = v.rentalPeriod || {};
        const start = new Date(startDate);
        const end = new Date(endDate);

        if (!startDate || !endDate || isNaN(start) || isNaN(end) || start >= end) {
          return res.status(400).json({ message: `‚è∞ Th·ªùi gian thu√™ kh√¥ng h·ª£p l·ªá cho xe: ${v.vehicleId}` });
        }
      }

      // ‚úÖ Add v√†o danh s√°ch h·ª£p l·ªá
      vehicleList.push({
        vehicleId: v.vehicleId,
        price: vehicle.price,
        rentalPeriod: v.rentalPeriod || {},
      });

      totalAmount += vehicle.price;
    }

    // ‚úÖ Validate n·∫øu thanh to√°n tr·∫£ g√≥p
    if (paymentMethod === 'installment' && totalAmount < 10000000) {
      return res.status(400).json({ message: "üö´ Tr·∫£ g√≥p ch·ªâ √°p d·ª•ng cho ƒë∆°n t·ª´ 10 tri·ªáu tr·ªü l√™n" });
    }

    // ‚úÖ T·∫°o ƒë∆°n h√†ng
    const newOrder = new Order({
      customerId: customer._id,
      vehicles: vehicleList,
      orderType,
      paymentMethod,
      staffId,
      note,
      totalAmount,
    });

    await newOrder.save();

    return res.status(201).json({
      message: "‚úÖ T·∫°o ƒë∆°n h√†ng th√†nh c√¥ng",
      order: newOrder,
    });
  } catch (error) {
    console.error('‚ùå L·ªói t·∫°o ƒë∆°n h√†ng:', error);
    return res.status(500).json({ message: 'üö´ L·ªói server khi t·∫°o ƒë∆°n h√†ng' });
  }
};
