import { Customer } from "../models/Customers.js";
import jwt from "jsonwebtoken";

// T·∫°o access token
const generateAccessToken = (customer) => {
  return jwt.sign(
    { id: customer._id },
    process.env.JWT_ACCESS_TOKEN_SECRET,
    { expiresIn: "1h" }
  );
};

// T·∫°o refresh token
const generateRefreshToken = (customer) => {
  return jwt.sign(
    { id: customer._id },
    process.env.JWT_REFRESH_TOKEN_SECRET,
    { expiresIn: "7d" }
  );
};

// üìå [POST] /customer-login
export const loginCustomer = async (req, res) => {
  try {
    const { identifier, password } = req.body;

    // Ki·ªÉm tra ƒë·∫ßu v√†o
    if (!identifier || !password) {
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin" });
    }

    // Ph√¢n lo·∫°i identifier l√† email hay phone
    const emailRegex = /^[\w.+-]+@gmail\.com$/;
    const phoneRegex = /^0\d{9}$/;

    let query = {};
    if (emailRegex.test(identifier)) {
      query.email = identifier;
    } else if (phoneRegex.test(identifier)) {
      query.phone = identifier;
    } else {
      return res.status(400).json({ message: "ƒê·ªãnh d·∫°ng email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá" });
    }

    // T√¨m kh√°ch h√†ng theo email ho·∫∑c phone
    const customer = await Customer.findOne(query);
    if (!customer) {
      return res.status(401).json({ message: "Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng ch√≠nh x√°c" });
    }

    // So s√°nh password
    const isMatch = await customer.comparePassword(password);
    if (!isMatch) {
      return res.status(401).json({ message: "Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng ch√≠nh x√°c" });
    }

    // T·∫°o token
    const accessToken = generateAccessToken(customer);
    const refreshToken = generateRefreshToken(customer);

    return res.status(200).json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
      accessToken,
      refreshToken,
    });

  } catch (error) {
    return res.status(500).json({ message: "L·ªói server" });
  }
};
//H√†m refresh token
export const refreshAccessToken = async (req, res) => {
    try {
        const { refreshToken } = req.body;
    
        // Ki·ªÉm tra token
        if (!refreshToken) {
        return res.status(401).json({ message: "Vui l√≤ng cung c·∫•p refresh token" });
        }
    
        // X√°c th·ª±c token
        const decoded = jwt.verify(refreshToken, process.env.JWT_REFRESH_TOKEN_SECRET);
        const customer = await Customer.findById(decoded.id).select("-password");
    
        if (!customer) {
        return res.status(404).json({ message: "Kh√°ch h√†ng kh√¥ng t·ªìn t·∫°i" });
        }
    
        // T·∫°o access token m·ªõi
        const newAccessToken = generateAccessToken(customer);
    
        return res.status(200).json({
        message: "L√†m m·ªõi access token th√†nh c√¥ng",
        accessToken: newAccessToken,
        });
    
    } catch (error) {
        console.error("‚ùå L·ªói l√†m m·ªõi access token:", error);
        return res.status(500).json({ message: "L·ªói server" });
    }
    }