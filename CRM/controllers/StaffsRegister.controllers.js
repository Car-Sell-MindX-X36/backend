import { Staff } from "../models/Staffs.js";

export const createStaff = async (req, res) => {
  try {
    const {
      name,
      email,
      phone,
      password,
      confirmPassword,
      gender,
      dob,
      role,
    } = req.body;

    // ‚úÖ Ki·ªÉm tra thi·∫øu field n√†o kh√¥ng (ph√≤ng bypass Joi)
    if (!name || !email || !phone || !password || !confirmPassword || !gender || !dob || !role) {
      return res.status(400).json({
        message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng b·∫Øt bu·ªôc",
      });
    }

    // ‚ùó Ki·ªÉm tra password v√† confirmPassword kh·ªõp nhau
    if (password !== confirmPassword) {
      return res.status(400).json({
        message: "M·∫≠t kh·∫©u kh√¥ng tr√πng kh·ªõp",
      });
    }

    // üîç Ki·ªÉm tra tr√πng email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i
    const existingStaff = await Staff.findOne({
      $or: [{ email }, { phone }],
    });

    if (existingStaff) {
      return res.status(409).json({
        message: "Email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng",
      });
    }

    //L∆∞u Data v√†o MongoDB
    const staffData = {
      name,
      email,
      phone,
      password,
      gender,
      dob,
      role,
    };

    const newStaff = await Staff.create(staffData);

    return res.status(201).json({
      message: "T·∫°o t√†i kho·∫£n th√†nh c√¥ng",
      data: {
        _id: newStaff._id,
        name: newStaff.name,
        email: newStaff.email,
        role: newStaff.role,
      },
    });
  } catch (err) {
    console.error("CreateStaff error:", err);
    return res.status(500).json({
      message: "L·ªói server",
      error: err.message,
    });
  }
};
